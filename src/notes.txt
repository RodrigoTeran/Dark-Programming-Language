-------------------------------------------- VARIABLES
variable = "variable"
- strings
- integers
- functions() // the result, if it doesnt return anything... then it is null
- lists


-------------------------------------------- FUNCTIONS
task variableFunction(){
  speak("Hello World")


  -> "hi" // the return
}
result = variableFunction()

task variableFunction2(parameter){
  speak("Hello" parameter)


  -> // return nothing... it is always necessary to write a return
}
variableFunction2("World")


-------------------------------------------- CONDITIONALS
// it receives two parameters... a comparation and a lambda function
assuming(variable == "hello" (){

}) different assumption(variable == "world" (){

}) different((){

})



-------------------------------------------- LOOPS
period(variable == "xd" (){

  destroy() // like break
})

period(variable == "xd" speak("xd"))

iterate(from(1 to 10) with i speak("hola"))

list = from(1 to 10)

iterate(lista with i (i){

})

iterate(1 2 5 with i (i){

})



-------------------------------------------- COMMENTS
/# Comment #/



-------------------------------------------- LOGIC OPERATORS
==
!=
>=
<=
>
<



-------------------------------------------- LISTS
variable = [2 2 2]
speak([2 2 2]) // This is the same as speak(2 2 2)

// but in different functions... is not the same
task myFunction(par1 par2){
  speak(par1) // 1 2 3
  speak(par2) // 4 5 6

  -> ""
}
myFunction([1 2 3] [4 5 6]) // This has 2 parameters
myFunction(1 2 3 4 5 6) // this has 6 parameters


// the from(number to number) function returns a list of elements through number to number...
list = from(1 to 10)
// list = [1 2 3 4 5 6 7 8 9 10]

list2 = [1 3 from(4 to 8) 1]
// list = [1 3 [4 5 6 7 8] 1]



-------------------------------------------- BUILT IN FUNCTIONS IN DARK LANGUAGE
task concatWith(list espacing){
  result = ""
  iterate(list with i (i){
    assuming(i == list[-1] (){
      result = concat(result i)
    }) different((){
      result = concat(result i espacing)
    })
  })
  
  -> result
}

task speakWith(list espacing){
  speak(concatWith(list espacing))
}
